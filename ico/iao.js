// Generated by CoffeeScript 2.3.2
(function() {
  // libraries
  var BigNumber, ERC20Contract, IAOContract, IAO_ADDRESS, IPFS, InsaneGas, Web3, erc20ABI, fetch, getAccountPriceInTokens, getContentFromIPFS, getTokenInfo, getTokenList, getTokenPairs, iaoABI, loadWeb3, registerWithDAI, registerWithETH, registerWithToken;

  Web3 = require("web3");

  fetch = require("node-fetch");

  BigNumber = require("bignumber.js");

  IPFS = require("ipfs");

  // smart contract ABI's
  iaoABI = require("./iao_abi.json");

  erc20ABI = require("./erc20_abi.json");

  // smart contract addresses
  IAO_ADDRESS = "0x0";

  InsaneGas = 1e18;

  
  // HELPERS

  // loads web3 as a global variable
  // returns success
  loadWeb3 = async function(useLedger, icoAddress) {
    var LedgerWalletSubproviderFactory, ProviderEngine, RpcSubprovider, e, engine, error, ledgerWalletSubProvider, networkId;
    IAO_ADDRESS = icoAddress;
    if (useLedger) {
      try {
        // Use ledger-wallet-provider to load web3
        ProviderEngine = require("web3-provider-engine");
        RpcSubprovider = require("web3-provider-engine/subproviders/rpc");
        LedgerWalletSubproviderFactory = (require("ledger-wallet-provider")).default;
        engine = new ProviderEngine;
        window.web3 = new Web3(engine);
        networkId = 1;
        ledgerWalletSubProvider = (await LedgerWalletSubproviderFactory(function() {
          return networkId;
        }, "44'/60'/0'/0"));
        if (!ledgerWalletSubProvider.isSupported) {
          return false;
        }
        engine.addProvider(ledgerWalletSubProvider);
        engine.addProvider(new RpcSubprovider({
          rpcUrl: "https://mainnet.infura.io/v3/7a7dd3472294438eab040845d03c215c"
        }));
        engine.start();
      } catch (error1) {
        e = error1;
        return false;
      }
    } else {
      // Use Metamask/other dApp browsers to load web3
      // Modern dapp browsers...
      if (window.ethereum) {
        window.web3 = new Web3(ethereum);
        try {
          // Request account access if needed
          await ethereum.enable();
        } catch (error1) {
          // Acccounts now exposed
          error = error1;
        }
      // User denied account access...

      // Legacy dapp browsers...
      } else if (window.web3) {
        window.web3 = new Web3(web3.currentProvider);
      } else {
        // Acccounts always exposed

        // Non-dapp browsers...
        return false;
      }
    }
    
    // set default account
    web3.eth.defaultAccount = ((await web3.eth.getAccounts()))[0];
    return true;
  };

  // returns the IAO contract object
  IAOContract = function() {
    if (typeof web3 === "undefined" || web3 === null) {
      return;
    }
    return new web3.eth.Contract(iaoABI, IAO_ADDRESS);
  };

  // returns the ERC20 contract object with given address
  ERC20Contract = function(address) {
    if (typeof web3 === "undefined" || web3 === null) {
      return;
    }
    return new web3.eth.Contract(erc20ABI, address);
  };

  
  // INFO GETTERS

  // returns list of token pairs & prices
  // Format:
  // {
  //   "ETH_OMG":
  //       {
  //           "symbol": "OMG",
  //           "name": "OmiseGO",
  //           "contractAddress": "0xd26114cd6ee289accf82350c8d8487fedb8a0c07",
  //           "decimals": 18,
  //           "currentPrice": 0.0225310175897248,
  //           "lastPrice": 0.0221079406797047,
  //           "lastTimestamp": 1522654595,
  //           "baseVolume": 6.9014983,
  //           "quoteVolume": 319.9424158830901
  //       },
  //   … (other token pairs)
  // }
  getTokenPairs = async function() {
    var request, tokensInformation;
    request = (await fetch("https://tracker.kyber.network/api/tokens/pairs"));
    tokensInformation = (await request.json());
    return tokensInformation;
  };

  // returns list of supported tokens
  // Format:
  // [
  //     {
  //         "symbol":"ZIL",
  //         "cmcName":"ZIL",
  //         "name":"Zilliqa",
  //         "decimals":12,
  //         "contractAddress":"0x05f4a42e251f2d52b8ed15e9fedaacfcef1fad27"
  //     },
  //     … (other tokens' information)
  // ]
  getTokenList = async function() {
    var request, tokensInformation;
    request = (await fetch("https://tracker.kyber.network/api/tokens/supported"));
    tokensInformation = (await request.json());
    return tokensInformation;
  };

  // get info of a token, given its symbol (ticker)
  getTokenInfo = async function(symbol) {
    var tokenPairs;
    tokenPairs = (await getTokenPairs());
    return tokenPairs[`ETH_${symbol}`];
  };

  // get the price of the account in terms of the given token.
  // amountInDAI is the price of the account in DAI
  getAccountPriceInTokens = async function(symbol, amountInDAI) {
    var daiInfo, ethPerDAI, ethPerToken, tokenInfo, tokenPerDAI;
    if (symbol !== "ETH") {
      tokenInfo = (await getTokenInfo(symbol));
      daiInfo = (await getTokenInfo("DAI"));
      ethPerToken = tokenInfo.currentPrice;
      ethPerDAI = daiInfo.currentPrice;
      tokenPerDAI = ethPerDAI / ethPerToken;
      return tokenPerDAI * amountInDAI;
    } else {
      tokenInfo = (await getTokenInfo("DAI"));
      ethPerDAI = tokenInfo.currentPrice;
      return ethPerDAI * amountInDAI;
    }
  };

  // fetch JSON stored at IPFS hash
  getContentFromIPFS = function(hash, callback) {
    var ipfs;
    ipfs = new IPFS();
    return ipfs.once("ready", function() {
      return ipfs.get(hash, function(err, files) {
        return callback(JSON.parse(files[0].content.toString("utf8")));
      });
    });
  };

  
  // REGISTRATION

  // register with DAI. amountInDAI should be in DAI (not wei).
  registerWithDAI = async function(amountInDAI, referrer, txCallback, errCallback, confirmCallback) {
    var amountInWei, iaoContract, tokenContract, tokenInfo;
    // init
    amountInWei = BigNumber(Math.floor(amountInDAI * 1e18));
    tokenInfo = (await getTokenInfo("DAI"));
    iaoContract = (await IAOContract());
    tokenContract = (await ERC20Contract(tokenInfo.contractAddress));
    referrer = web3.utils.isAddress(referrer) ? referrer : "0x0000000000000000000000000000000000000000";
    // approve token amount
    return (await tokenContract.methods.approve(IAO_ADDRESS, amountInWei).estimateGas({
      from: web3.eth.defaultAccount,
      gas: InsaneGas
    }).then(function(estimatedGas) {
      if (estimatedGas === InsaneGas || !(estimatedGas != null)) {
        errCallback();
        return;
      }
      return tokenContract.methods.approve(IAO_ADDRESS, amountInWei).send({
        from: web3.eth.defaultAccount,
        gas: Math.ceil(estimatedGas * 1.5),
        gasPrice: `${1e10}`
      }).on("transactionHash", async function() {
        // register
        return (await iaoContract.methods.registerWithDAI(amountInWei, referrer).estimateGas({
          from: web3.eth.defaultAccount,
          gas: InsaneGas
        }).then(function(estimatedGas) {
          if (estimatedGas === InsaneGas || !(estimatedGas != null)) {
            errCallback();
            return;
          }
          return iaoContract.methods.registerWithDAI(amountInWei, referrer).send({
            from: web3.eth.defaultAccount,
            gas: Math.ceil(estimatedGas * 1.5),
            gasPrice: `${1e10}`
          }).on("transactionHash", txCallback).on('receipt', confirmCallback);
        }).catch(errCallback));
      });
    }).catch(errCallback));
  };

  // register with ETH. amountInDAI should be in DAI (not wei).
  registerWithETH = async function(amountInDAI, referrer, txCallback, errCallback, confirmCallback) {
    var amountInWei, ethPerDAI, iaoContract, tokenInfo;
    // init
    tokenInfo = (await getTokenInfo("DAI"));
    iaoContract = (await IAOContract());
    referrer = web3.utils.isAddress(referrer) ? referrer : "0x0000000000000000000000000000000000000000";
    // calculate ETH amount
    ethPerDAI = tokenInfo.currentPrice;
    amountInWei = BigNumber(Math.floor(amountInDAI * ethPerDAI * 1e18));
    // register
    return (await iaoContract.methods.registerWithETH(referrer).estimateGas({
      from: web3.eth.defaultAccount,
      value: amountInWei,
      gas: InsaneGas
    }).then(async function(estimatedGas) {
      if (estimatedGas === InsaneGas || !(estimatedGas != null)) {
        errCallback();
        return;
      }
      return (await iaoContract.methods.registerWithETH(referrer).send({
        from: web3.eth.defaultAccount,
        gas: Math.ceil(estimatedGas * 1.5),
        value: amountInWei,
        gasPrice: `${1e10}`
      }).on("transactionHash", txCallback).on('receipt', confirmCallback));
    }).catch(errCallback));
  };

  // register with an ERC20 token. amountInDAI should be in DAI (not wei).
  registerWithToken = async function(symbol, amountInDAI, referrer, txCallback, errCallback, confirmCallback) {
    var amountInTokenUnits, daiInfo, ethPerDAI, ethPerToken, iaoContract, tokenContract, tokenInfo, tokenPerDAI;
    // init
    tokenInfo = (await getTokenInfo(symbol));
    daiInfo = (await getTokenInfo("DAI"));
    referrer = web3.utils.isAddress(referrer) ? referrer : "0x0000000000000000000000000000000000000000";
    iaoContract = (await IAOContract());
    tokenContract = (await ERC20Contract(tokenInfo.contractAddress));
    // calculate amount in tokens
    ethPerToken = tokenInfo.currentPrice;
    ethPerDAI = daiInfo.currentPrice;
    tokenPerDAI = ethPerDAI / ethPerToken;
    amountInTokenUnits = BigNumber(Math.floor(amountInDAI * tokenPerDAI * Math.pow(10, tokenInfo.decimals)));
    // set allowance to 0
    return (await tokenContract.methods.approve(IAO_ADDRESS, 0).estimateGas({
      from: web3.eth.defaultAccount,
      gas: InsaneGas
    }).then(function(estimatedGas) {
      if (estimatedGas === InsaneGas || !(estimatedGas != null)) {
        errCallback();
        return;
      }
      return tokenContract.methods.approve(IAO_ADDRESS, 0).send({
        from: web3.eth.defaultAccount,
        gas: Math.ceil(estimatedGas * 1.5),
        gasPrice: `${1e10}`
      }).on("transactionHash", async function() {
        // approve token amount
        return (await tokenContract.methods.approve(IAO_ADDRESS, amountInTokenUnits).estimateGas({
          from: web3.eth.defaultAccount,
          gas: InsaneGas
        }).then(function(estimatedGas) {
          if (estimatedGas === InsaneGas || !(estimatedGas != null)) {
            errCallback();
            return;
          }
          return tokenContract.methods.approve(IAO_ADDRESS, amountInTokenUnits).send({
            from: web3.eth.defaultAccount,
            gas: Math.ceil(estimatedGas * 1.5),
            gasPrice: `${1e10}`
          }).on("transactionHash", function() {
            // register
            return iaoContract.methods.registerWithToken(tokenInfo.contractAddress, amountInTokenUnits, referrer).send({
              from: web3.eth.defaultAccount,
              gas: 1500000,
              gasPrice: `${1e10}`
            }).on("transactionHash", txCallback).on('receipt', confirmCallback);
          });
        }));
      });
    }).catch(errCallback));
  };

  // export functions to window
  window.loadWeb3 = loadWeb3;

  window.getTokenList = getTokenList;

  window.getAccountPriceInTokens = getAccountPriceInTokens;

  window.getContentFromIPFS = getContentFromIPFS;

  window.registerWithDAI = registerWithDAI;

  window.registerWithETH = registerWithETH;

  window.registerWithToken = registerWithToken;

}).call(this);
